sources:
  cloud-sql-pg-source:
    kind: cloud-sql-postgres
    project: "..."
    region: "europe-west9"
    instance: "..."
    database: "..."
    user: ""
    password: ""
    ipType: "private"

tools:
  # === USING NATIVE TOOLBOX TOOLS ===
  
  # Native tool for listing active queries with advanced filtering
  list_active_queries:
    kind: postgres-list-active-queries
    source: cloud-sql-pg-source
    description: "Lists currently active SQL queries on the database. Allows filtering by minimum duration and excluding specific applications. Essential for identifying slow queries in real-time during performance incidents."
    
  # Native tool for listing tables with complete details
  list_database_tables:
    kind: postgres-list-tables
    source: cloud-sql-pg-source
    description: "Lists database tables with their columns, constraints, indexes, and triggers. Provides a comprehensive overview of the data structure."
    
  # Native tool for listing installed extensions
  list_installed_extensions:
    kind: postgres-list-installed-extensions
    source: cloud-sql-pg-source
    description: "Lists all currently installed PostgreSQL extensions with their versions and schemas. Useful for checking availability of features like pg_stat_statements."
    
  # Native tool for listing available extensions
  list_available_extensions:
    kind: postgres-list-available-extensions
    source: cloud-sql-pg-source
    description: "Lists all PostgreSQL extensions available for installation. Allows identifying monitoring and performance extensions that could be added."

  # === SPECIALIZED DBA TOOLS (not covered by native tools) ===
  
  # Custom SQL tool for listing all schemas
  list_all_schemas:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Lists all schemas in the database with their properties and ownership information."
    statement: |
      SELECT 
        nspname as schema_name,
        pg_get_userbyid(nspowner) as schema_owner,
        CASE 
          WHEN nspname IN ('information_schema', 'pg_catalog') 
          THEN 'system' 
          ELSE 'user' 
        END as schema_type
      FROM pg_namespace
      WHERE nspname NOT LIKE 'pg_toast%'
      AND nspname NOT LIKE 'pg_temp%'
      ORDER BY 
        CASE 
          WHEN nspname IN ('information_schema', 'pg_catalog') 
          THEN 1 
          ELSE 0 
        END,
        nspname;
  
  get_slowest_historical_queries:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Identifies the most expensive queries by total execution time from pg_stat_statements. Critical for historical performance analysis and identifying queries that need optimization priority."
    parameters:
      - name: limit
        type: integer
        description: "Number of queries to return."
    statement: |
      SELECT 
        left(query, 100) AS query_preview,
        calls,
        round(total_exec_time::numeric, 2) AS total_exec_time_ms,
        round(mean_exec_time::numeric, 2) AS mean_exec_time_ms,
        round((100.0 * total_exec_time / sum(total_exec_time) OVER())::numeric, 2) AS percent_total_time
      FROM pg_stat_statements 
      ORDER BY total_exec_time DESC 
      LIMIT $1;

  get_most_io_intensive_queries:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Identifies queries that consume the most disk I/O by analyzing block reads. Critical for diagnosing disk performance issues and identifying queries needing index optimization."
    parameters:
      - name: limit
        type: integer
        description: "Number of queries to return."
    statement: |
      SELECT 
        left(query, 100) AS query_preview,
        calls,
        shared_blks_read,
        shared_blks_hit,
        CASE 
          WHEN (shared_blks_hit + shared_blks_read) > 0 
          THEN round((shared_blks_hit * 100.0 / (shared_blks_hit + shared_blks_read))::numeric, 2)
          ELSE NULL 
        END AS cache_hit_ratio_percent
      FROM pg_stat_statements 
      WHERE (shared_blks_hit + shared_blks_read) > 0
      ORDER BY shared_blks_read DESC 
      LIMIT $1;

  get_most_frequent_queries:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Identifies the most frequently executed queries. Useful for understanding usage patterns and identifying queries that are candidates for optimization or caching."
    parameters:
      - name: limit
        type: integer
        description: "Number of queries to return."
    statement: |
      SELECT 
        left(query, 100) AS query_preview,
        calls,
        round(total_exec_time::numeric, 2) AS total_exec_time_ms,
        round(mean_exec_time::numeric, 2) AS mean_exec_time_ms
      FROM pg_stat_statements 
      ORDER BY calls DESC 
      LIMIT $1;

  get_blocking_sessions:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Detects sessions that are actively blocking other sessions waiting for locks. Essential for diagnosing deadlocks and resource contention. Provides details of both blocking and blocked sessions."
    statement: |
      SELECT 
        blocked.pid AS blocked_pid,
        blocked.usename AS blocked_user,
        left(blocked.query, 80) AS blocked_query,
        blocking.pid AS blocking_pid,
        blocking.usename AS blocking_user,
        left(blocking.query, 80) AS blocking_query,
        now() - blocked.query_start AS blocked_duration
      FROM pg_stat_activity blocked 
      JOIN pg_locks blocked_locks ON blocked_locks.pid = blocked.pid 
        AND NOT blocked_locks.granted
      JOIN pg_locks blocking_locks ON blocking_locks.locktype = blocked_locks.locktype 
        AND blocking_locks.database IS NOT DISTINCT FROM blocked_locks.database 
        AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation 
        AND blocking_locks.pid != blocked_locks.pid 
        AND blocking_locks.granted
      JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
      WHERE blocked.state = 'active';

  get_long_running_transactions:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Identifies transactions that have been open for a long time which can cause bloat, replication, and performance issues. Transactions in 'idle in transaction' state are particularly problematic."
    statement: |
      SELECT 
        pid,
        datname,
        usename,
        client_addr,
        state,
        now() - xact_start AS transaction_duration,
        now() - query_start AS query_duration,
        left(query, 100) AS current_query
      FROM pg_stat_activity 
      WHERE xact_start IS NOT NULL 
        AND (state = 'idle in transaction' OR now() - xact_start > interval '5 minutes')
      ORDER BY transaction_duration DESC NULLS LAST;

  get_table_sizes_summary:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Provides comprehensive table information including sizes, row counts, and types for tables and views in a schema."
    parameters:
      - name: schema_name
        type: string
        description: "Schema name to analyze."
      - name: limit
        type: integer
        description: "Number of tables to return."
    statement: |
      SELECT 
        t.table_name,
        t.table_type,
        COALESCE(s.n_tup_ins + s.n_tup_upd + s.n_tup_del, 0) as row_count,
        COALESCE(pg_total_relation_size(c.oid), 0) as total_size_bytes,
        COALESCE(pg_relation_size(c.oid), 0) as table_size_bytes,
        COALESCE(pg_total_relation_size(c.oid) - pg_relation_size(c.oid), 0) as index_size_bytes,
        pg_size_pretty(COALESCE(pg_total_relation_size(c.oid), 0)) as total_size_pretty,
        pg_size_pretty(COALESCE(pg_relation_size(c.oid), 0)) as table_size_pretty,
        pg_size_pretty(COALESCE(pg_total_relation_size(c.oid) - pg_relation_size(c.oid), 0)) as index_size_pretty
      FROM information_schema.tables t
      LEFT JOIN pg_namespace n ON n.nspname = t.table_schema
      LEFT JOIN pg_class c ON c.relname = t.table_name AND c.relnamespace = n.oid
      LEFT JOIN pg_stat_user_tables s ON s.relname = t.table_name AND s.schemaname = t.table_schema
      WHERE t.table_schema = $1
      AND t.table_type IN ('BASE TABLE', 'VIEW')
      ORDER BY COALESCE(pg_total_relation_size(c.oid), 0) DESC, t.table_name
      LIMIT $2;

  find_invalid_indexes:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Detects invalid indexes in the database. Invalid indexes can result from errors during concurrent index creation and should be dropped and recreated."
    statement: |
      SELECT 
        n.nspname AS schema_name,
        c.relname AS index_name,
        t.relname AS table_name,
        pg_size_pretty(pg_relation_size(c.oid)) as index_size
      FROM pg_class c
      JOIN pg_namespace n ON n.oid = c.relnamespace
      JOIN pg_index i ON i.indexrelid = c.oid
      JOIN pg_class t ON t.oid = i.indrelid
      WHERE c.relkind = 'i' 
        AND i.indisvalid = false
      ORDER BY pg_relation_size(c.oid) DESC;

  get_unused_indexes:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Identifies indexes that are rarely or never used which could be candidates for removal. Based on index usage statistics."
    parameters:
      - name: min_size_mb
        type: integer
        description: "Minimum size in MB to consider an index."
    statement: |
      SELECT 
        schemaname,
        relname as tablename,
        indexrelname as indexname,
        idx_tup_read,
        idx_tup_fetch,
        pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,
        pg_relation_size(indexrelid) as size_bytes
      FROM pg_stat_user_indexes 
      WHERE pg_relation_size(indexrelid) > ($1 * 1024 * 1024)
        AND idx_tup_read < 1000
        AND idx_tup_fetch < 1000
      ORDER BY pg_relation_size(indexrelid) DESC;

  get_database_users_and_roles:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Lists all database roles/users with their attributes and privileges. Essential for security auditing and access management."
    statement: |
      SELECT 
        rolname,
        rolsuper,
        rolinherit,
        rolcreaterole,
        rolcreatedb,
        rolcanlogin,
        rolconnlimit,
        rolvaliduntil,
        rolreplication
      FROM pg_roles 
      ORDER BY rolname;

  get_user_table_permissions:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Shows specific permissions for a user on a given table in a specific schema. Useful for diagnosing access issues and verifying permissions. Includes both direct permissions and permissions inherited through roles."
    parameters:
      - name: schema_name
        type: string
        description: "Schema name (e.g., 'public', 'ecommerce_schema')."
      - name: table_name
        type: string
        description: "Table name to check (e.g., 'orders', 'users')."
      - name: username
        type: string
        description: "Username/role to check (e.g., 'postgres', 'app_user')."
    statement: |
      SELECT 
        grantee,
        table_schema,
        table_name,
        privilege_type,
        is_grantable,
        CASE 
          WHEN grantee = $3 THEN 'Direct'
          ELSE 'Via Role: ' || grantee
        END as permission_source
      FROM information_schema.role_table_grants 
      WHERE table_schema = $1
        AND table_name = $2
        AND (
          grantee = $3
          OR grantee IN (
            SELECT r.rolname
            FROM pg_roles r
            WHERE pg_has_role($3, r.oid, 'member')
              AND r.rolname != $3
          )
        )
      ORDER BY permission_source, privilege_type;

  get_current_connections_summary:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Shows a summary of active connections grouped by user and application. Complements the native list-active-queries tool with an aggregated view."
    statement: |
      SELECT 
        usename,
        application_name,
        client_addr,
        state,
        count(*) as connection_count,
        min(backend_start) as oldest_connection,
        max(backend_start) as newest_connection
      FROM pg_stat_activity 
      WHERE datname IS NOT NULL
      GROUP BY usename, application_name, client_addr, state
      ORDER BY connection_count DESC;

  get_user_role_memberships:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Lists all roles that a specific user is a member of, directly or through inheritance. Important for understanding effective permissions."
    parameters:
      - name: username
        type: string
        description: "Username to list role memberships for."
    statement: |
      SELECT 
        r.rolname as role_name,
        r.rolsuper,
        r.rolcreaterole,
        r.rolcreatedb
      FROM pg_roles r
      WHERE pg_has_role($1, r.oid, 'member')
        AND r.rolname != $1
      ORDER BY r.rolname;

  get_database_sizes:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Shows the size of all databases on the PostgreSQL server. Essential for capacity planning and monitoring disk usage."
    statement: |
      SELECT 
        datname,
        pg_size_pretty(pg_database_size(datname)) AS size,
        pg_database_size(datname) as size_bytes
      FROM pg_database 
      WHERE datistemplate = false
      ORDER BY pg_database_size(datname) DESC;

  get_table_maintenance_stats:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Shows maintenance statistics (VACUUM/ANALYZE) for a specific table in a specific schema. Critical for diagnosing performance issues related to bloat and stale statistics."
    parameters:
      - name: schema_name
        type: string
        description: "Schema name (e.g., 'public', 'ecommerce_schema')."
      - name: table_name
        type: string
        description: "Table name to analyze (e.g., 'orders', 'users')."
    statement: |
      SELECT 
        schemaname,
        relname as table_name,
        last_vacuum,
        last_autovacuum,
        last_analyze,
        last_autoanalyze,
        vacuum_count,
        autovacuum_count,
        analyze_count,
        autoanalyze_count,
        n_tup_ins,
        n_tup_upd,
        n_tup_del,
        n_dead_tup,
        CASE 
          WHEN n_tup_ins + n_tup_upd + n_tup_del > 0 
          THEN round((n_dead_tup::numeric / (n_tup_ins + n_tup_upd + n_tup_del)) * 100, 2)
          ELSE 0 
        END AS dead_tuple_ratio_percent
      FROM pg_stat_user_tables 
      WHERE schemaname = $1
        AND relname = $2
      ORDER BY n_dead_tup DESC;

  get_memory_configuration:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Shows critical PostgreSQL memory configuration parameters. Essential for diagnosing performance issues related to memory allocation."
    statement: |
      SELECT 
        name,
        setting,
        unit,
        source,
        short_desc
      FROM pg_settings 
      WHERE name IN (
        'shared_buffers',
        'work_mem', 
        'maintenance_work_mem',
        'effective_cache_size',
        'max_connections',
        'max_worker_processes',
        'max_parallel_workers',
        'checkpoint_completion_target'
      )
      ORDER BY name;

  get_postgresql_version_info:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Returns the complete PostgreSQL version with compilation details. Useful for verifying version and identifying available features."
    statement: "SELECT version();"

  get_replication_status:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Shows PostgreSQL replication status (if configured). Essential for monitoring replica health and diagnosing replication lag."
    statement: |
      SELECT 
        client_addr,
        client_hostname,
        state,
        sent_lsn,
        write_lsn,
        flush_lsn,
        replay_lsn,
        write_lag,
        flush_lag,
        replay_lag,
        sync_state
      FROM pg_stat_replication
      ORDER BY client_addr;

  get_cache_hit_ratios:
    kind: postgres-sql
    source: cloud-sql-pg-source
    description: "Calculates cache hit ratios to assess PostgreSQL cache effectiveness. Low ratios may indicate a need to increase shared_buffers."
    statement: |
      SELECT 
        'Buffer Cache' as cache_type,
        round(
          (sum(blks_hit) * 100.0 / NULLIF(sum(blks_hit) + sum(blks_read), 0))::numeric, 
          2
        ) AS hit_ratio_percent
      FROM pg_stat_database
      UNION ALL
      SELECT 
        'Index Cache' as cache_type,
        round(
          (sum(idx_blks_hit) * 100.0 / NULLIF(sum(idx_blks_hit) + sum(idx_blks_read), 0))::numeric,
          2
        ) AS hit_ratio_percent
      FROM pg_statio_user_indexes;

toolsets:
  # Complete toolset for experienced DBAs
  postgres-dba-complete:
    # Native Toolbox tools
    - list_active_queries
    - list_database_tables
    - list_installed_extensions
    - list_available_extensions
    # Specialized DBA tools
    - list_all_schemas
    - get_slowest_historical_queries
    - get_most_io_intensive_queries
    - get_most_frequent_queries
    - get_blocking_sessions
    - get_long_running_transactions
    - get_table_sizes_summary
    - find_invalid_indexes
    - get_unused_indexes
    - get_database_users_and_roles
    - get_user_table_permissions
    - get_current_connections_summary
    - get_user_role_memberships
    - get_database_sizes
    - get_table_maintenance_stats
    - get_memory_configuration
    - get_postgresql_version_info
    - get_replication_status
    - get_cache_hit_ratios